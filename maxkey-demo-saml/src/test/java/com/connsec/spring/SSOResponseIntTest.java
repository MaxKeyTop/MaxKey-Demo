/*
*   Copyright 2010 James Cox <james.s.cox@gmail.com>
*
*   Licensed under the Apache License, Version 2.0 (the "License");
*   you may not use this file except in compliance with the License.
*   You may obtain a copy of the License at
*
*       http://www.apache.org/licenses/LICENSE-2.0
*
*   Unless required by applicable law or agreed to in writing, software
*   distributed under the License is distributed on an "AS IS" BASIS,
*   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*   See the License for the specific language governing permissions and
*   limitations under the License.


package com.connsec.spring;

import static org.junit.Assert.*;
import static org.mockito.Mockito.when;

import java.util.Iterator;

import javax.servlet.FilterChain;
import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.opensaml.common.binding.security.IssueInstantRule;
import org.opensaml.util.storage.MapBasedStorageService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.connsec.saml.AbstractRequestIntTest;
import com.connsec.saml.binding.SecurityPolicyDelegate;
import com.connsec.spring.SAMLResponseAuthenticationProcessingFilter;
import com.connsec.saml.AbstractRequestIntTest;

*//**
 * Test the SAMLResponseAuthenticationProcessingFilter inside a Spring container.
 * 
 * Try to consume an authnResponse that was generated by SSOIntTest in the idp project.
 * 
 * @author jcox
 *
 *//*
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations={"file:src/main/webapp/WEB-INF/spring/applicationContext-property-mappings.xml","file:src/main/webapp/WEB-INF/spring/applicationContext-sp-config.xml","file:src/main/webapp/WEB-INF/spring/applicationContext-spring-security.xml"})
public class SSOResponseIntTest extends AbstractRequestIntTest {

	
	private final static Logger logger = LoggerFactory
			.getLogger(SSOResponseIntTest.class);
	
	public static final String SAML_RESPONSE_POST_PARAM = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOlJlc3BvbnNlIHhtbG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIiBEZXN0aW5hdGlvbj0iaHR0cHM6Ly9sb2NhbGhvc3Q6ODA4MC9zcC9Bc3NlcnRpb25Db25zdW1lclNlcnZpY2UiIElEPSIxYzdiNjlkYi03Nzc5LTRmZDItOWQ5NS01MWI4YzU4OWQ4OWEiIEluUmVzcG9uc2VUbz0iZWQ4NjI4M2MtM2FlOS00MGM5LTkxNTktMGMwZTcxMDQ3OTBiIiBJc3N1ZUluc3RhbnQ9IjIwMTAtMTItMTZUMjM6MjQ6MDAuNDU2WiIgVmVyc2lvbj0iMi4wIj48c2FtbDI6SXNzdWVyIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIiBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpuYW1laWQtZm9ybWF0OmVudGl0eSI+aWRwPC9zYW1sMjpJc3N1ZXI+PGRzOlNpZ25hdHVyZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+CjxkczpTaWduZWRJbmZvPgo8ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPgo8ZHM6U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3JzYS1zaGExIi8+CjxkczpSZWZlcmVuY2UgVVJJPSIjMWM3YjY5ZGItNzc3OS00ZmQyLTlkOTUtNTFiOGM1ODlkODlhIj4KPGRzOlRyYW5zZm9ybXM+CjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPgo8ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIj48ZWM6SW5jbHVzaXZlTmFtZXNwYWNlcyB4bWxuczplYz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIiBQcmVmaXhMaXN0PSJkcyBzYW1sMiBzYW1sMnAgeHMiLz48L2RzOlRyYW5zZm9ybT4KPC9kczpUcmFuc2Zvcm1zPgo8ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiLz4KPGRzOkRpZ2VzdFZhbHVlPkZwR1hGQXBlbWVXVGJjRld6cFZBUmE4VWx3dz08L2RzOkRpZ2VzdFZhbHVlPgo8L2RzOlJlZmVyZW5jZT4KPC9kczpTaWduZWRJbmZvPgo8ZHM6U2lnbmF0dXJlVmFsdWU+CkdVT1dsVTRDNHV5d1Q5eFI0RGlub1lLK0Q1aER5N3JGZWhrVHBTeXV3S0JTV0N3dFRpcnFCcHVDYXdFUFhBaFJvN3A5anloV1NIOE0KUldhdVVWUlUwYTBlS2Z6Mk9kMEdIdkx5WjRvTGdNMUdVYmVLQnVLeFlXUGtJaCtvVnI1aWhlT3ozVzFEejRUZTVSeEpCT01lMlFVTgovdWxVUjB3dmFDM25LMWxQSDlrPQo8L2RzOlNpZ25hdHVyZVZhbHVlPgo8ZHM6S2V5SW5mbz48ZHM6WDUwOURhdGE+PGRzOlg1MDlDZXJ0aWZpY2F0ZT5NSUlDU2pDQ0FiTUNCRXl4eFhnd0RRWUpLb1pJaHZjTkFRRUZCUUF3YkRFa01DSUdDU3FHU0liM0RRRUpBUllWYW1GdFpYTXVjeTVqCmIzaEFaMjFoYVd3dVkyOXRNUXN3Q1FZRFZRUUdFd0pWVXpFYU1CZ0dBMVVFQ2d3UlNXUmxiblJwZEhrZ1VISnZkbWxrWlhJeEREQUsKQmdOVkJBc01BMmxrY0RFTk1Bc0dBMVVFQXd3RWFtTnZlREFlRncweE1ERXdNVEF4TXpVME1EQmFGdzB5TURFd01EY3hNelUwTURCYQpNR3d4SkRBaUJna3Foa2lHOXcwQkNRRVdGV3BoYldWekxuTXVZMjk0UUdkdFlXbHNMbU52YlRFTE1Ba0dBMVVFQmhNQ1ZWTXhHakFZCkJnTlZCQW9NRVVsa1pXNTBhWFI1SUZCeWIzWnBaR1Z5TVF3d0NnWURWUVFMREFOcFpIQXhEVEFMQmdOVkJBTU1CR3BqYjNnd2daOHcKRFFZSktvWklodmNOQVFFQkJRQURnWTBBTUlHSkFvR0JBSXQzM29yQUw2TWFqaEE4amVYYWY4YVBiSVgyNGRsdjBId0JCbWRMQnprcgpPMEkzYkVMdEtTemJLRkJrSXdRWkthRkhZZFQ3Y3hteTFlcHdmZllzWDJJcGd1ejk5d0dnSDkyR2lXQ0x1UHIxNEhxTUF6L3d4LzFwCkFGRkVSYTVyeGFkcTBKeG1rMVNGOGdkejdGdG9RT1QwV1VuSWNzMjB5WHRhMEFicWQxQXhBZ01CQUFFd0RRWUpLb1pJaHZjTkFRRUYKQlFBRGdZRUFPQ3NnQ0I3emMvT3JZOHU1NG5VYjJhcEpFWjIwc1NPNDhpbHpuNVBvR0JReEZaSklnMEUwZUJUZkNUTkdRdUY1YW5JNApOWjdRMGdUUlQ4SUJ4ZWlQaGtzeis1Tkc0ZUNiNis0VnlLSnN6eDZyWTdTNnVxLzA4TjNFTXJ1NWp5TlZFbi9vM0YxUXB3dGxNRGlwCkg4cytkcHVSNnNFQWNwdWdRWUJINkYxTWZJMD08L2RzOlg1MDlDZXJ0aWZpY2F0ZT48L2RzOlg1MDlEYXRhPjwvZHM6S2V5SW5mbz48L2RzOlNpZ25hdHVyZT48c2FtbDJwOlN0YXR1cz48c2FtbDJwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6U3VjY2VzcyIvPjwvc2FtbDJwOlN0YXR1cz48c2FtbDI6QXNzZXJ0aW9uIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIiBJRD0iYTAxNTYyZjUtMGY0YS00N2M4LTk1MTMtNTJkY2UzMmEzY2Q1IiBJc3N1ZUluc3RhbnQ9IjIwMTAtMTItMTZUMjM6MjQ6MDAuNDU2WiIgVmVyc2lvbj0iMi4wIj48c2FtbDI6SXNzdWVyIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOm5hbWVpZC1mb3JtYXQ6ZW50aXR5Ij5pZHA8L3NhbWwyOklzc3Vlcj48c2FtbDI6U3ViamVjdD48c2FtbDI6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6dW5zcGVjaWZpZWQiPmR1ZGVAaWRwLmNvbTwvc2FtbDI6TmFtZUlEPjxzYW1sMjpTdWJqZWN0Q29uZmlybWF0aW9uIE1ldGhvZD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmNtOmJlYXJlciI+PHNhbWwyOlN1YmplY3RDb25maXJtYXRpb25EYXRhIEFkZHJlc3M9IjEwLjQwLjEyNS4xIiBJblJlc3BvbnNlVG89ImVkODYyODNjLTNhZTktNDBjOS05MTU5LTBjMGU3MTA0NzkwYiIgTm90T25PckFmdGVyPSIyMDEwLTEyLTE2VDIzOjI1OjMwLjQ1MloiIFJlY2lwaWVudD0iaHR0cHM6Ly9sb2NhbGhvc3Q6ODA4MC9zcC9Bc3NlcnRpb25Db25zdW1lclNlcnZpY2UiLz48L3NhbWwyOlN1YmplY3RDb25maXJtYXRpb24+PC9zYW1sMjpTdWJqZWN0PjxzYW1sMjpBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMTAtMTItMTZUMjM6MjM6NDIuOTYwWiI+PHNhbWwyOkF1dGhuQ29udGV4dD48c2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY+dXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFjOmNsYXNzZXM6UGFzc3dvcmQ8L3NhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPjwvc2FtbDI6QXV0aG5Db250ZXh0Pjwvc2FtbDI6QXV0aG5TdGF0ZW1lbnQ+PHNhbWwyOkF0dHJpYnV0ZVN0YXRlbWVudD48c2FtbDI6QXR0cmlidXRlIE5hbWU9Im9yZy5zcHJpbmdmcmFtZXdvcmsuc2VjdXJpdHkuY29yZS5HcmFudGVkQXV0aG9yaXR5IiBOYW1lRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXR0cm5hbWUtZm9ybWF0OmJhc2ljIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj5ST0xFXzI8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4bWxuczp4cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJ4czpzdHJpbmciPlJPTEVfMTwvc2FtbDI6QXR0cmlidXRlVmFsdWU+PC9zYW1sMjpBdHRyaWJ1dGU+PC9zYW1sMjpBdHRyaWJ1dGVTdGF0ZW1lbnQ+PC9zYW1sMjpBc3NlcnRpb24+PC9zYW1sMnA6UmVzcG9uc2U+";                
	public static final String SIGNATURE_POST_PARAM ="CRpHAxnO37U5Ld3vqJkOHnYKIeGe6UqACjHBbvj9g9jlcOJDTpKo0rXJow0TSa8QjVySzPmJ2vHc+T8CSYpV+YfRGUL27zzevpzPA7BtDaJ/Ft8xkqfYEIuueekcqhrGWxkDhD8CTcloBZEDEn8dh7CCOocqTGFo7qumpOXC0Is=";                
	public static final String SIG_ALG_POST_PARAM ="http://www.w3.org/2000/09/xmldsig#rsa-sha1";                
	public static final String KEY_INFO_POST_PARAM ="PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48ZHM6S2V5SW5mbyB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+PGRzOlg1MDlEYXRhPjxkczpYNTA5Q2VydGlmaWNhdGU+TUlJQ1NqQ0NBYk1DQkV5eHhYZ3dEUVlKS29aSWh2Y05BUUVGQlFBd2JERWtNQ0lHQ1NxR1NJYjNEUUVKQVJZVmFtRnRaWE11Y3k1agpiM2hBWjIxaGFXd3VZMjl0TVFzd0NRWURWUVFHRXdKVlV6RWFNQmdHQTFVRUNnd1JTV1JsYm5ScGRIa2dVSEp2ZG1sa1pYSXhEREFLCkJnTlZCQXNNQTJsa2NERU5NQXNHQTFVRUF3d0VhbU52ZURBZUZ3MHhNREV3TVRBeE16VTBNREJhRncweU1ERXdNRGN4TXpVME1EQmEKTUd3eEpEQWlCZ2txaGtpRzl3MEJDUUVXRldwaGJXVnpMbk11WTI5NFFHZHRZV2xzTG1OdmJURUxNQWtHQTFVRUJoTUNWVk14R2pBWQpCZ05WQkFvTUVVbGtaVzUwYVhSNUlGQnliM1pwWkdWeU1Rd3dDZ1lEVlFRTERBTnBaSEF4RFRBTEJnTlZCQU1NQkdwamIzZ3dnWjh3CkRRWUpLb1pJaHZjTkFRRUJCUUFEZ1kwQU1JR0pBb0dCQUl0MzNvckFMNk1hamhBOGplWGFmOGFQYklYMjRkbHYwSHdCQm1kTEJ6a3IKTzBJM2JFTHRLU3piS0ZCa0l3UVpLYUZIWWRUN2N4bXkxZXB3ZmZZc1gySXBndXo5OXdHZ0g5MkdpV0NMdVByMTRIcU1Bei93eC8xcApBRkZFUmE1cnhhZHEwSnhtazFTRjhnZHo3RnRvUU9UMFdVbkljczIweVh0YTBBYnFkMUF4QWdNQkFBRXdEUVlKS29aSWh2Y05BUUVGCkJRQURnWUVBT0NzZ0NCN3pjL09yWTh1NTRuVWIyYXBKRVoyMHNTTzQ4aWx6bjVQb0dCUXhGWkpJZzBFMGVCVGZDVE5HUXVGNWFuSTQKTlo3UTBnVFJUOElCeGVpUGhrc3orNU5HNGVDYjYrNFZ5S0pzeng2clk3UzZ1cS8wOE4zRU1ydTVqeU5WRW4vbzNGMVFwd3RsTURpcApIOHMrZHB1UjZzRUFjcHVnUVlCSDZGMU1mSTA9PC9kczpYNTA5Q2VydGlmaWNhdGU+PC9kczpYNTA5RGF0YT48L2RzOktleUluZm8+";                

	
	//args to class under test 
	@Mock private HttpServletRequest request;
	MockHttpServletResponse response;
	
	@Mock HttpSession session;
	@Mock FilterChain filterChain;
	
	SAMLResponseAuthenticationProcessingFilter filter;

	//handle to replay message map
	private MapBasedStorageService<String, ?> mapBasedStorageService;
	//handle to turn off time expiry
	private IssueInstantRule issueInstantRule;
	private SecurityPolicyDelegate securityPolicyDelegate;

	private String filterURL = "https://localhost:8080/sp/AssertionConsumerService" ;

	
	@Autowired
	public void setFilter(SAMLResponseAuthenticationProcessingFilter filter) {
		this.filter = filter;
	}
	
	@Autowired
	public void setSecurityPolicyDelegate(
			SecurityPolicyDelegate securityPolicyDelegate) {
		this.securityPolicyDelegate = securityPolicyDelegate;
	}

	@Autowired
	public void setMapBasedStorageService(
			MapBasedStorageService mapBasedStorageService) {
		this.mapBasedStorageService = mapBasedStorageService;
	}

	@Autowired
	public void setIssueInstantRule(IssueInstantRule issueInstantRule) {
		this.issueInstantRule = issueInstantRule;
	}

	@Before
	public void before() throws Exception {
	
		MockitoAnnotations.initMocks(this);
		response = new MockHttpServletResponse();
	}
	
	@After
	public void after() throws Exception {
		
		for (Iterator<String> partitions = mapBasedStorageService.getPartitions(); partitions.hasNext();) {
			
			String partition =  partitions.next();
			logger.debug("Removing message cache for issuer {}", partition);
			
				for (Iterator keys = mapBasedStorageService.getKeys(partition); keys.hasNext();) {
					String key = (String) keys.next();
					logger.debug("Removing message with key of {}" , key );
					Object removed = mapBasedStorageService.remove(partition, key);
					logger.debug("Message removed:  {}", removed);
				}	
		}
		
		 
		 if(!securityPolicyDelegate.getPolicyRules().contains(issueInstantRule)){
			 //add it back
			 securityPolicyDelegate.getPolicyRules().add(issueInstantRule);
		 }
		
	}
	
	@Test
	public void testValidSignatureAuthnResponse() throws Exception {
		
		logger.debug("starting test.");
		
		securityPolicyDelegate.getPolicyRules().remove(issueInstantRule);
		

		populateRequestURL(request, filterURL);
		when(request.getMethod()).thenReturn("POST");		
		when(request.getContextPath()).thenReturn("/sp");
		when(request.getParameter("SAMLResponse")).thenReturn(SAML_RESPONSE_POST_PARAM);
		when(request.getParameter("Signature")).thenReturn(SIGNATURE_POST_PARAM);
		when(request.getParameter("SigAlg")).thenReturn(SIG_ALG_POST_PARAM);
		when(request.getParameter("KeyInfo")).thenReturn(KEY_INFO_POST_PARAM);
		
		filter.doFilter(request, response, filterChain);
		
		assertNotNull("response.getContentAsString was null", response.getContentAsString());
		logger.debug("The response was: {}", response.getContentAsString());
		
		assertEquals("/sp/", response.getRedirectedUrl());
	}

}
*/